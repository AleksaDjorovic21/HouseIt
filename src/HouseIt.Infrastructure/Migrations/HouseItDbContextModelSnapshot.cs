// <auto-generated />
using HouseIt.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HouseIt.Api.Migrations
{
    [DbContext(typeof(HouseItDbContext))]
    partial class HouseItDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HouseIt.Core.Domain.Balcony", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Balconies");
                });

            modelBuilder.Entity("HouseIt.Core.Domain.DesignRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DesignRequests");
                });

            modelBuilder.Entity("HouseIt.Core.Domain.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DesignRequestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DesignRequestId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("HouseIt.Core.Domain.Kitchen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<int>("FloorId")
                        .HasColumnType("integer");

                    b.Property<bool>("HasDiningArea")
                        .HasColumnType("boolean");

                    b.Property<int>("Sqrm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Kitchens");
                });

            modelBuilder.Entity("HouseIt.Core.Domain.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<int>("FloorId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomType")
                        .HasColumnType("integer");

                    b.Property<int>("Sqrm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HouseIt.Core.Domain.Toilet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<int>("FloorId")
                        .HasColumnType("integer");

                    b.Property<int>("Sqrm")
                        .HasColumnType("integer");

                    b.Property<int>("ToiletType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Toilets");
                });

            modelBuilder.Entity("HouseIt.Core.Domain.Balcony", b =>
                {
                    b.HasOne("HouseIt.Core.Domain.Room", null)
                        .WithOne("Balcony")
                        .HasForeignKey("HouseIt.Core.Domain.Balcony", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HouseIt.Core.Domain.Floor", b =>
                {
                    b.HasOne("HouseIt.Core.Domain.DesignRequest", null)
                        .WithMany("Floors")
                        .HasForeignKey("DesignRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HouseIt.Core.Domain.Kitchen", b =>
                {
                    b.HasOne("HouseIt.Core.Domain.Floor", null)
                        .WithMany("Kitchens")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("HouseIt.Core.Domain.Door", "Doors", b1 =>
                        {
                            b1.Property<int>("KitchenId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("KitchenId", "Id");

                            b1.ToTable("Kitchens");

                            b1.ToJson("Doors");

                            b1.WithOwner()
                                .HasForeignKey("KitchenId");
                        });

                    b.OwnsMany("HouseIt.Core.Domain.Window", "Windows", b1 =>
                        {
                            b1.Property<int>("KitchenId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("KitchenId", "Id");

                            b1.ToTable("Kitchens");

                            b1.ToJson("Windows");

                            b1.WithOwner()
                                .HasForeignKey("KitchenId");
                        });

                    b.Navigation("Doors");

                    b.Navigation("Windows");
                });

            modelBuilder.Entity("HouseIt.Core.Domain.Room", b =>
                {
                    b.HasOne("HouseIt.Core.Domain.Floor", null)
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("HouseIt.Core.Domain.Door", "Doors", b1 =>
                        {
                            b1.Property<int>("RoomId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("RoomId", "Id");

                            b1.ToTable("Rooms");

                            b1.ToJson("Doors");

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });

                    b.OwnsMany("HouseIt.Core.Domain.Window", "Windows", b1 =>
                        {
                            b1.Property<int>("RoomId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("RoomId", "Id");

                            b1.ToTable("Rooms");

                            b1.ToJson("Windows");

                            b1.WithOwner()
                                .HasForeignKey("RoomId");
                        });

                    b.Navigation("Doors");

                    b.Navigation("Windows");
                });

            modelBuilder.Entity("HouseIt.Core.Domain.Toilet", b =>
                {
                    b.HasOne("HouseIt.Core.Domain.Floor", null)
                        .WithMany("Toilets")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("HouseIt.Core.Domain.Door", "Doors", b1 =>
                        {
                            b1.Property<int>("ToiletId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ToiletId", "Id");

                            b1.ToTable("Toilets");

                            b1.ToJson("Doors");

                            b1.WithOwner()
                                .HasForeignKey("ToiletId");
                        });

                    b.OwnsMany("HouseIt.Core.Domain.Window", "Windows", b1 =>
                        {
                            b1.Property<int>("ToiletId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ToiletId", "Id");

                            b1.ToTable("Toilets");

                            b1.ToJson("Windows");

                            b1.WithOwner()
                                .HasForeignKey("ToiletId");
                        });

                    b.Navigation("Doors");

                    b.Navigation("Windows");
                });

            modelBuilder.Entity("HouseIt.Core.Domain.DesignRequest", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("HouseIt.Core.Domain.Floor", b =>
                {
                    b.Navigation("Kitchens");

                    b.Navigation("Rooms");

                    b.Navigation("Toilets");
                });

            modelBuilder.Entity("HouseIt.Core.Domain.Room", b =>
                {
                    b.Navigation("Balcony");
                });
#pragma warning restore 612, 618
        }
    }
}
